<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Curso', 'doctrine');

/**
 * BaseCurso
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $anio
 * @property integer $termino
 * @property string $id_materia
 * @property integer $paralelo
 * @property string $profesor
 * @property string $factor_asistencia1
 * @property string $factor_asistencia2
 * @property Doctrine_Collection $Categoria
 * @property Materia $Materia
 * @property Doctrine_Collection $Asistencia
 * @property Usuario $Usuario
 * @property Doctrine_Collection $Ayudantecurso
 * @property Doctrine_Collection $Estudiantecurso
 * @property Doctrine_Collection $Grupo
 * 
 * @method integer             getId()                 Returns the current record's "id" value
 * @method integer             getAnio()               Returns the current record's "anio" value
 * @method integer             getTermino()            Returns the current record's "termino" value
 * @method string              getIdMateria()          Returns the current record's "id_materia" value
 * @method integer             getParalelo()           Returns the current record's "paralelo" value
 * @method string              getProfesor()           Returns the current record's "profesor" value
 * @method string              getFactorAsistencia1()  Returns the current record's "factor_asistencia1" value
 * @method string              getFactorAsistencia2()  Returns the current record's "factor_asistencia2" value
 * @method Doctrine_Collection getCategoria()          Returns the current record's "Categoria" collection
 * @method Materia             getMateria()            Returns the current record's "Materia" value
 * @method Doctrine_Collection getAsistencia()         Returns the current record's "Asistencia" collection
 * @method Usuario             getUsuario()            Returns the current record's "Usuario" value
 * @method Doctrine_Collection getAyudantecurso()      Returns the current record's "Ayudantecurso" collection
 * @method Doctrine_Collection getEstudiantecurso()    Returns the current record's "Estudiantecurso" collection
 * @method Doctrine_Collection getGrupo()              Returns the current record's "Grupo" collection
 * @method Curso               setId()                 Sets the current record's "id" value
 * @method Curso               setAnio()               Sets the current record's "anio" value
 * @method Curso               setTermino()            Sets the current record's "termino" value
 * @method Curso               setIdMateria()          Sets the current record's "id_materia" value
 * @method Curso               setParalelo()           Sets the current record's "paralelo" value
 * @method Curso               setProfesor()           Sets the current record's "profesor" value
 * @method Curso               setFactorAsistencia1()  Sets the current record's "factor_asistencia1" value
 * @method Curso               setFactorAsistencia2()  Sets the current record's "factor_asistencia2" value
 * @method Curso               setCategoria()          Sets the current record's "Categoria" collection
 * @method Curso               setMateria()            Sets the current record's "Materia" value
 * @method Curso               setAsistencia()         Sets the current record's "Asistencia" collection
 * @method Curso               setUsuario()            Sets the current record's "Usuario" value
 * @method Curso               setAyudantecurso()      Sets the current record's "Ayudantecurso" collection
 * @method Curso               setEstudiantecurso()    Sets the current record's "Estudiantecurso" collection
 * @method Curso               setGrupo()              Sets the current record's "Grupo" collection
 * 
 * @package    CALPESPOL
 * @subpackage model
 * @author     ABEJJA
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCurso extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('curso');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('anio', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('termino', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_materia', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('paralelo', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('profesor', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('factor_asistencia1', 'string', 1, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('factor_asistencia2', 'string', 1, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Categoria', array(
             'local' => 'id',
             'foreign' => 'id_curso'));

        $this->hasOne('Materia', array(
             'local' => 'id_materia',
             'foreign' => 'id_codigo'));

        $this->hasMany('Asistencia', array(
             'local' => 'id',
             'foreign' => 'id_curso'));

        $this->hasOne('Usuario', array(
             'local' => 'profesor',
             'foreign' => 'id'));

        $this->hasMany('Ayudantecurso', array(
             'local' => 'id',
             'foreign' => 'id_curso'));

        $this->hasMany('Estudiantecurso', array(
             'local' => 'id',
             'foreign' => 'id_curso'));

        $this->hasMany('Grupo', array(
             'local' => 'id',
             'foreign' => 'id_curso'));
    }
}